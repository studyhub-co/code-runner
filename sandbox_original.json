{
    "language": "buildcreatereactapp",
    "directories": [
        {
            "uuid": "37eb0efa-364d-4576-bbfc-c9f5080bc561",
            "created_on": "2020-05-21T11:14:35.917201-04:00",
            "name": "public",
            "slug": "public-2",
            "slug_prefix": "public",
            "slug_suffix": 2,
            "position": null,
            "author": 1,
            "updated_on": "2020-05-21T11:14:35.917201-04:00",
            "last_edit_user": null,
            "shortid": "61c9b2b1",
            "directory": null,
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "title": "public",
            "id": "37eb0efa-364d-4576-bbfc-c9f5080bc561",
            "directory_shortid": null
        },
        {
            "uuid": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "created_on": "2020-05-21T11:14:34.982779-04:00",
            "name": "src",
            "slug": "src-2",
            "slug_prefix": "src",
            "slug_suffix": 2,
            "position": null,
            "author": 1,
            "updated_on": "2020-05-21T11:14:34.982779-04:00",
            "last_edit_user": null,
            "shortid": "f27fede2",
            "directory": null,
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "title": "src",
            "id": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "directory_shortid": null
        }
    ],
    "modules": [
        {
            "uuid": "e4504296-6abb-4992-b4a5-98f95740a7ce",
            "created_on": "2020-05-21T11:14:39.051272-04:00",
            "name": "mockData.tsx",
            "slug": "mockdatatsx-19",
            "slug_prefix": "mockdatatsx",
            "slug_suffix": 19,
            "position": null,
            "author": 441,
            "updated_on": "2020-10-09T03:49:16.902855-04:00",
            "last_edit_user": 441,
            "code": "import { VectorData } from \"@studyhub.co/eval/lib/components/vector/IData/index\";\r\n\r\n// <MenuItem value={10}>Full vector match</MenuItem>\r\n/// <MenuItem value={20}>Magnitude only</MenuItem>\r\n// <MenuItem value={30}>Angle only</MenuItem>\r\n\r\nexport const mockVector: VectorData = {\r\n  question: {\r\n    content: {\r\n      text: \"Enter\\\\ question\\\\ text\",\r\n      image: \"\",\r\n      hint: \"\"\r\n    },\r\n    type: \"base\"\r\n  },\r\n  answer: {\r\n    content: {\r\n      text: \"\",\r\n      image: \"\",\r\n      hint: \"\"\r\n    },\r\n    type: \"base\"\r\n  },\r\n  questionTextOnly: false,\r\n  questionVectorIsNull: false,\r\n  hiddenFields: {\r\n    answerVectors: [],\r\n    answer: {\r\n      content: {\r\n        text: \"\",\r\n        image: \"\",\r\n        hint: \"\"\r\n      },\r\n      type: \"base\"\r\n    }\r\n  },\r\n  questionVectors: [\r\n    // {\r\n    //   angle: 0,\r\n    //   xComponent: 0,\r\n    //   yComponent: 0,\r\n    //   magnitude: 0,\r\n    // },\r\n  ],\r\n  answerVectors: [\r\n    // {\r\n    //   angle: 0,\r\n    //   xComponent: 0,\r\n    //   yComponent: 0,\r\n    //   magnitude: 0,\r\n    // },\r\n  ],\r\n  answerVectorIsNull: false,\r\n  answerTextOnly: false,\r\n  answerNullableVector: false,\r\n  answerToCheck: 10\r\n};",
            "directory": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "is_binary": false,
            "shortid": "0cc62bc1",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": "f27fede2",
            "title": "mockData.tsx",
            "id": "e4504296-6abb-4992-b4a5-98f95740a7ce"
        },
        {
            "uuid": "bd345caa-82bb-4d23-bd53-9961bac7319b",
            "created_on": "2020-05-21T11:14:38.054888-04:00",
            "name": "styles.css",
            "slug": "stylescss-2",
            "slug_prefix": "stylescss",
            "slug_suffix": 2,
            "position": null,
            "author": 1,
            "updated_on": "2020-05-21T11:14:38.054888-04:00",
            "last_edit_user": null,
            "code": ".App {\n  font-family: sans-serif;\n  text-align: center;\n}",
            "directory": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "is_binary": false,
            "shortid": "01397909",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": "f27fede2",
            "title": "styles.css",
            "id": "bd345caa-82bb-4d23-bd53-9961bac7319b"
        },
        {
            "uuid": "f95e693f-9524-4929-8e13-cec2b085e266",
            "created_on": "2020-09-15T12:19:26.719574-04:00",
            "name": "validate.js",
            "slug": "validatejs-113",
            "slug_prefix": "validatejs",
            "slug_suffix": 113,
            "position": null,
            "author": 441,
            "updated_on": "2021-03-18T06:54:57.449930-04:00",
            "last_edit_user": 441,
            "code": "const validate = (correctData, userReactionData) => {\r\n  const vectorRegex = /((?<first_component>-?\\d*)?\\s*\\\\hat\\{(?<first_symbol>[xyij])\\})?(?<operator>[+-])?((?<second_component>-?\\d*)?\\s*\\\\hat\\{(?<second_symbol>[xyij])\\})?/;\r\n\r\n  const convertToVector = vectorLatexText => {\r\n    // \"\"\"\r\n    // For now we assume that the vector must come in the format:\r\n    //     A\\hat{x|i} Â± B\\hat{y|j}\r\n    // where A and B are the x and y components of the\r\n    // vector, respectively.\r\n    // Note that each space specified in the typing is escaped by the `\\`\r\n    // character, so we must account for those as well.\r\n    // \"\"\"\r\n    function is_x(x) {\r\n      return [\"x\", \"i\"].indexOf(x) > -1;\r\n      // return x in ('x', 'i')\r\n    }\r\n\r\n    function is_y(y) {\r\n      return [\"y\", \"j\"].indexOf(y) > -1;\r\n      // return y in ('y', 'j')\r\n    }\r\n\r\n    function is_xy(component) {\r\n      return [\"x\", \"y\"].indexOf(component) > -1;\r\n      // return component in ('x', 'y')\r\n    }\r\n\r\n    function to_int(val) {\r\n      if (val === \"-\") {\r\n        return -1;\r\n      } else {\r\n        return parseInt(val);\r\n      }\r\n      // if val == '-':\r\n      //     return -1\r\n      // else:\r\n      //     return int(val)\r\n    }\r\n\r\n    // rep = self.representation.replace('\\ ', '')\r\n    // match = self.vector_regex.match(rep)\r\n    const match = vectorLatexText.match(vectorRegex);\r\n    if (match) {\r\n      const first = match.groups[\"first_symbol\"];\r\n      const second = match.groups[\"second_symbol\"];\r\n      let multiplier;\r\n      if (is_xy(first) === is_xy(second) || second == null) {\r\n        if (match.groups[\"operator\"] == \"-\") {\r\n          multiplier = -1;\r\n        } else {\r\n          multiplier = 1;\r\n        }\r\n        let x, y;\r\n        if (is_x(first) && is_y(second)) {\r\n          x = to_int(match.groups[\"first_component\"] || 1);\r\n          y = to_int(match.groups[\"second_component\"] || 1) * multiplier;\r\n        } else if (is_x(second) && is_y(first)) {\r\n          y = to_int(match.groups[\"first_component\"] || 1);\r\n          x = to_int(match.groups[\"second_component\"] || 1) * multiplier;\r\n        } else if (is_x(first)) {\r\n          x = to_int(match.groups[\"first_component\"] || 1);\r\n          y = 0;\r\n        } else if (is_y(first)) {\r\n          y = to_int(match.groups[\"first_component\"] || 1);\r\n          x = 0;\r\n        } else {\r\n          // raise ValueError('Unrecognized vector format')\r\n          throw \"Unrecognized vector format\";\r\n        }\r\n        return { x, y };\r\n        // return Vector(x_component=x, y_component=y)\r\n      }\r\n    }\r\n    throw \"Unrecognized vector format\";\r\n    // raise ValueError('Unrecognized vector format')\r\n  };\r\n\r\n  if (correctData.answer.content.text) {\r\n    // check text (Mathematical Expression) answer\r\n    const correctVector = convertToVector(correctData.answer.content.text);\r\n    const userVector = convertToVector(userReactionData.answer.content.text);\r\n    return JSON.stringify(correctVector) === JSON.stringify(userVector);\r\n  } else {\r\n    // check null\r\n    if (\r\n      correctData.answerVectorIsNull &&\r\n      correctData.answerVectorIsNull === userReactionData.answerVectorIsNull\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (\r\n      correctData.answerVectors.length !== userReactionData.answerVectors.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // if at least one of vectors are not correct - return 'false'\r\n    let answerIsCorrect = true;\r\n\r\n    // check vectors answers\r\n    correctData.answerVectors.forEach((correctVector, index) => {\r\n      // TODO check that index will be in correct order\r\n      const userVector = userReactionData.answerVectors[index];\r\n      if (correctData.answerToCheck === 10) {\r\n        // 'Full vector match',\r\n        // this is not work because order is important\r\n        // answerIsCorrect = JSON.stringify(correctVector) === JSON.stringify(userVector);\r\n        // check that all keys in correct answer is equal to userVector key's values\r\n        answerIsCorrect = Object.keys(correctVector).every(\r\n          key => correctVector[key].toFixed(2) === userVector[key].toFixed(2)\r\n        );\r\n      } else if (correctData.answerToCheck === 20) {\r\n        // 'Magnitude only',\r\n        answerIsCorrect =\r\n          correctVector.magnitude.toFixed(2) ===\r\n          userVector.magnitude.toFixed(2);\r\n      } else if (correctData.answerToCheck === 30) {\r\n        // Angle only',\r\n        answerIsCorrect =\r\n          correctVector.angle.toFixed(2) === userVector.angle.toFixed(2);\r\n      }\r\n    });\r\n\r\n    return answerIsCorrect;\r\n  }\r\n};\r\n\r\n// export default validate;",
            "directory": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "is_binary": false,
            "shortid": "f16d8ba5",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": "f27fede2",
            "title": "validate.js",
            "id": "f95e693f-9524-4929-8e13-cec2b085e266"
        },
        {
            "uuid": "448e4207-9550-4e30-bad0-f74f8a437f3e",
            "created_on": "2020-05-21T11:14:37.423276-04:00",
            "name": "index.tsx",
            "slug": "indextsx-45",
            "slug_prefix": "indextsx",
            "slug_suffix": 45,
            "position": null,
            "author": 1,
            "updated_on": "2021-09-14T08:39:33.928546-04:00",
            "last_edit_user": 441,
            "code": "import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"@studyhub.co/eval/lib/redux/modules/index.js\";\n\nimport App from \"./app\";\n\nconst store = createStore(combineReducers(rootReducer), applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);",
            "directory": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "is_binary": false,
            "shortid": "7d8c89da",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": "f27fede2",
            "title": "index.tsx",
            "id": "448e4207-9550-4e30-bad0-f74f8a437f3e"
        },
        {
            "uuid": "5a56ccb6-63fd-441e-b508-44e40eca8884",
            "created_on": "2020-05-21T11:14:38.410668-04:00",
            "name": "package.json",
            "slug": "packagejson-271",
            "slug_prefix": "packagejson",
            "slug_suffix": 271,
            "position": null,
            "author": 1,
            "updated_on": "2021-09-19T02:56:41.125345-04:00",
            "last_edit_user": 441,
            "code": "{\n  \"name\": \"vector-official\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"src/index.tsx\",\n  \"dependencies\": {\n    \"@material-ui/core\": \"4.12.3\",\n    \"@studyhub.co/eval\": \"0.8.6\",\n    \"axios\": \"0.20.0\",\n    \"better-react-mathjax\": \"1.0.3\",\n    \"evaluatex\": \"2.2.0\",\n    \"fabric\": \"4.1.0\",\n    \"fp-ts\": \"2.8.2\",\n    \"immer\": \"7.0.9\",\n    \"io-ts\": \"2.2.10\",\n    \"js-quantities\": \"1.7.6\",\n    \"react\": \"16.8.6\",\n    \"react-dom\": \"16.8.6\",\n    \"react-icons\": \"3.9.0\",\n    \"react-mathquill\": \"0.2.8\",\n    \"react-redux\": \"7.2.0\",\n    \"react-scripts\": \"3.0.1\",\n    \"redux\": \"4.0.5\",\n    \"redux-thunk\": \"2.3.0\",\n    \"styled-components\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"3.3.3\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not ie <= 11\",\n    \"not op_mini all\"\n  ]\n}",
            "directory": null,
            "is_binary": false,
            "shortid": "7030d0b2",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": null,
            "title": "package.json",
            "id": "5a56ccb6-63fd-441e-b508-44e40eca8884"
        },
        {
            "uuid": "80f6a1dc-9592-4540-b9df-157e7e98c716",
            "created_on": "2020-05-21T11:14:39.791818-04:00",
            "name": "app.tsx",
            "slug": "apptsx-229",
            "slug_prefix": "apptsx",
            "slug_suffix": 229,
            "position": null,
            "author": 441,
            "updated_on": "2021-09-22T04:19:32.498225-04:00",
            "last_edit_user": 441,
            "code": "import React from \"react\";\r\n\r\nimport Vector from \"@studyhub.co/eval/lib/components/vector\";\r\nimport { theme } from \"@studyhub.co/eval/lib/components/style\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\n// import { mockVectorData } from \"./mockData\";\r\n\r\nconst App: React.FC = () => {\r\n  const getMaterialUuid = () => {\r\n    // /evaluation/03bc1a2d-febe-4a0b-9028-1957eed68bd2/03bc1a2d-febe-4a0b-9028-1957eed68bd2/\r\n    const segments = document.location.pathname.split(\"/\");\r\n    let materiallUuid = null;\r\n    if (segments.length > 3) {\r\n      materiallUuid = segments[3];\r\n    }\r\n    return materiallUuid;\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    checkedEditMode: false,\r\n    // previousMaterialUuid: null,\r\n    currentMaterialUuid: getMaterialUuid()\r\n  });\r\n\r\n  const handleEditModeChange = () => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setState({ ...state, checkedEditMode: event.target.checked });\r\n  };\r\n\r\n  const moveToNextComponent = nextMaterialUuid => {\r\n    setState({ ...state, currentMaterialUuid: nextMaterialUuid });\r\n  };\r\n\r\n  const getLessonUuid = () => {\r\n    // /evaluation/03bc1a2d-febe-4a0b-9028-1957eed68bd2/03bc1a2d-febe-4a0b-9028-1957eed68bd2/\r\n    const segments = document.location.pathname.split(\"/\");\r\n    let lessonUuid = null;\r\n    if (segments.length > 4) {\r\n      lessonUuid = segments[4];\r\n    }\r\n    return lessonUuid;\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div>this is the test</div>\r\n      <div>\r\n        <Vector\r\n          lessonUuid={getLessonUuid()}\r\n          // previousMaterialUuid={state.previousMaterialUuid}\r\n          moveToNextComponent={moveToNextComponent}\r\n          materialUuid={state.currentMaterialUuid}\r\n          // editMode={state.checkedEditMode}\r\n          // componentData={mockVectorData.data}\r\n        />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;",
            "directory": "b1b607ba-8578-47e8-be73-71f492baf86a",
            "is_binary": false,
            "shortid": "2f7c79ac",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": "f27fede2",
            "title": "app.tsx",
            "id": "80f6a1dc-9592-4540-b9df-157e7e98c716"
        },
        {
            "uuid": "72499216-4e08-43fa-856d-a6a75a073441",
            "created_on": "2020-05-21T11:14:36.704716-04:00",
            "name": "public/index.html",
            "slug": "indexhtml-10",
            "slug_prefix": "indexhtml",
            "slug_suffix": 10,
            "position": null,
            "author": 1,
            "updated_on": "2021-09-25T14:23:37.369580-04:00",
            "last_edit_user": 441,
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\t<meta name=\"theme-color\" content=\"#000000\">\n\t<!--\n      manifest.json provides metadata used when your web app is added to the\n      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/\n    -->\n\t<link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n\t<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n\t<!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n\t<title>React App</title>\n</head>\n\n<body>\n\t<noscript>\n\t\tYou need to enable JavaScript to run this app.\n\t</noscript>\n\t<div id=\"root\"></div>\n\t<!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n</body>\n\n</html>",
            "directory": "37eb0efa-364d-4576-bbfc-c9f5080bc561",
            "is_binary": false,
            "shortid": "f6013a00",
            "sandbox": "dd3e7824-1565-4c69-960d-6ca9cb561906",
            "directory_shortid": "61c9b2b1",
            "title": "index.html",
            "id": "72499216-4e08-43fa-856d-a6a75a073441"
        }
    ]
}